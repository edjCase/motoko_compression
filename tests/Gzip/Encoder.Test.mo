import Debug "mo:base@0/Debug";
import Text "mo:base@0/Text";
import Blob "mo:base@0/Blob";
import Iter "mo:base@0/Iter";
import Gzip "../../src/Gzip";
import GzipEncoder "../../src/Gzip/Encoder";
import { test; suite } "mo:test";

func assertEqual(actual : [[Nat8]], expected : [[Nat8]]) {
  if (actual != expected) {
    let actualBlobs = actual.vals()
    |> Iter.map(_, func(x : [Nat8]) : Blob = Blob.fromArray(x))
    |> Iter.toArray(_);
    let expectedBlobs = expected.vals()
    |> Iter.map(_, func(x : [Nat8]) : Blob = Blob.fromArray(x))
    |> Iter.toArray(_);
    Debug.trap("\nExpected\n" # debug_show expectedBlobs # "\nActual\n" # debug_show actualBlobs);
  };
};

suite(
  "Gzip Encoder",
  func() {
    test(
      "No compression",
      func() {
        let gzip_encoder = Gzip.EncoderBuilder().noCompression().build();
        let input = Text.encodeUtf8("Hello World");
        let bytes = Blob.toArray(input);

        gzip_encoder.encode(bytes);
        let output = gzip_encoder.finish();

        assertEqual(
          output.chunks,
          [[0x1F, 0x8B, 0x08, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x0B, 0x00, 0xF4, 0xFF, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x56, 0xB1, 0x17, 0x4A, 0x0B, 0x00, 0x00, 0x00]],
        );
      },
    );
    suite(
      "Compression: Fixed Huffman codes",
      func() {
        test(
          "Compress \"Hello world\" (no back references)",
          func() {
            let gzip_encoder = Gzip.EncoderBuilder().build();
            let input = Text.encodeUtf8("Hello World");
            let bytes = Blob.toArray(input);

            gzip_encoder.encode(bytes);
            let output = gzip_encoder.finish();

            assertEqual(
              output.chunks,
              [[0x1F, 0x8B, 0x08, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF3, 0x48, 0xCD, 0xC9, 0xC9, 0x57, 0x08, 0xCF, 0x2F, 0xCA, 0x49, 0x01, 0x00, 0x56, 0xB1, 0x17, 0x4A, 0x0B, 0x00, 0x00, 0x00]],
            );
          },
        );
        test(
          "Compress short text",
          func() {
            let gzip_encoder = Gzip.EncoderBuilder().build();
            let text = "Literature is full of repetition. Literary writers constantly use the literary device of repeated words. I think the only type of repetition which is bad is sloppy repetition. Repetition which is unintentional, which sounds awkward.";
            let input = Text.encodeUtf8(text);
            let bytes = Blob.toArray(input);

            gzip_encoder.encode(bytes);
            let output = gzip_encoder.finish();
            Debug.print("short text example: " # debug_show (text.size()) # " -> " # debug_show output.total_size # " bytes");

            assertEqual(
              output.chunks,
              [[0x1F, 0x8B, 0x08, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF3, 0xC9, 0x2C, 0x49, 0x2D, 0x4A, 0x2C, 0x29, 0x2D, 0x4A, 0x55, 0xC8, 0x2C, 0x56, 0x48, 0x2B, 0xCD, 0xC9, 0x51, 0xC8, 0x4F, 0x53, 0x28, 0x4A, 0x2D, 0x48, 0x2D, 0xC9, 0x2C, 0xC9, 0xCC, 0xCF, 0xD3, 0x53, 0x80, 0xA8, 0x28, 0xAA, 0x54, 0x28, 0x2F, 0x02, 0xB1, 0x8A, 0x15, 0x92, 0xF3, 0xF3, 0x8A, 0x4B, 0x12, 0xF3, 0x4A, 0x72, 0x2A, 0x15, 0x4A, 0x8B, 0x53, 0x15, 0x4A, 0x32, 0x52, 0x15, 0x72, 0x40, 0x32, 0x20, 0x35, 0x29, 0xA9, 0x65, 0x99, 0xC9, 0xA9, 0x30, 0x23, 0x12, 0x4B, 0x52, 0x53, 0x14, 0xCA, 0xF3, 0x8B, 0x52, 0x8A, 0xF5, 0x14, 0x3C, 0x81, 0x0A, 0x33, 0xF3, 0xB2, 0x81, 0x24, 0x50, 0x3A, 0x0F, 0xA8, 0xB7, 0xA4, 0xB2, 0x00, 0xC8, 0x82, 0x28, 0x84, 0xD8, 0xA5, 0x50, 0x9E, 0x91, 0x99, 0x9C, 0x01, 0x72, 0x47, 0x52, 0x62, 0x0A, 0x88, 0x2A, 0xCE, 0xC9, 0x2F, 0x28, 0xA8, 0x44, 0x52, 0xA1, 0xA7, 0x10, 0x04, 0x67, 0x23, 0x54, 0x97, 0xE6, 0x65, 0xE6, 0x95, 0xA4, 0xE6, 0x81, 0x04, 0x13, 0x73, 0x74, 0xA0, 0xE2, 0xC5, 0xF9, 0xA5, 0x79, 0x29, 0xC5, 0x0A, 0x89, 0xE5, 0xD9, 0xE5, 0x89, 0x45, 0x29, 0x7A, 0x00, 0x7E, 0x9C, 0xB5, 0x21, 0xE8, 0x00, 0x00, 0x00]],
            );
          },
        );
        // test(
        //     "Compression of large files with Fixed Huffman codes",
        //     func() {
        //         let gzip_encoder = Gzip.EncoderBuilder().build();
        //         let input = Text.encodeUtf8(Example.text);
        //         let bytes = Blob.toArray(input);

        //         gzip_encoder.encode(bytes);
        //         let output = gzip_encoder.finish();
        //         Debug.print("Example: " # debug_show (Example.text.size()) # " -> " # debug_show output.total_size # " bytes");

        //         let allChunks = output.chunks.vals()
        //         |> Itertools.fold(
        //             _,
        //             [],
        //             func(acc : [Nat8], x : [Nat8]) : [Nat8] {
        //                 return Array.append(acc, x);
        //             },
        //         )
        //         |> Blob.fromArray(_);
        //         if (Example.fixed_code_compression != allChunks) {
        //             Debug.print("\nExpected\n" # debug_show Example.fixed_code_compression # "\nActual\n" # debug_show allChunks);
        //         };
        //     },
        // );
      },
    );

    suite(
      "Compression: Dynamic Huffman codes",
      func() {
        test(
          "Compress short text",
          func() {

            let gzip_encoder = GzipEncoder.EncoderBuilder().dynamicHuffman().build();

            let text = "Literature is full of repetition. Literary writers constantly use the literary device of repeated words. I think the only type of repetition which is bad is sloppy repetition. Repetition which is unintentional, which sounds awkward.";
            let input = Text.encodeUtf8(text);
            let bytes = Blob.toArray(input);

            gzip_encoder.encode(bytes);
            let output = gzip_encoder.finish();
            Debug.print("short text example: " # debug_show (text.size()) # " -> " # debug_show output.total_size # " bytes");
            assertEqual(
              output.chunks,
              [[0x1F, 0x8B, 0x08, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x03, 0x4D, 0x8E, 0xCB, 0x0D, 0x03, 0x21, 0x0C, 0x44, 0x5B, 0x99, 0x02, 0x22, 0xFA, 0x88, 0x94, 0x53, 0x3A, 0x20, 0x8B, 0x57, 0x6B, 0x2D, 0x32, 0x08, 0x9B, 0x20, 0xBA, 0x0F, 0x88, 0xFC, 0x2E, 0xF6, 0x68, 0xE6, 0xF9, 0x73, 0x63, 0xA3, 0xE2, 0xAD, 0x16, 0x02, 0x2B, 0xF6, 0x1A, 0x23, 0xD2, 0x8E, 0x42, 0x99, 0x8C, 0x8D, 0x93, 0x38, 0x2C, 0xA2, 0x74, 0xB4, 0x32, 0x95, 0x62, 0x4B, 0xA2, 0xE6, 0xC5, 0x62, 0x47, 0x55, 0x82, 0x1D, 0x84, 0x38, 0x93, 0xC9, 0x04, 0x7A, 0xF2, 0x46, 0x9F, 0x15, 0xDE, 0x28, 0xA0, 0xA5, 0x12, 0xD4, 0xE1, 0x3A, 0x40, 0x96, 0x73, 0xD4, 0x11, 0xCB, 0x98, 0xB5, 0x9E, 0x87, 0x5A, 0xE0, 0xBA, 0x85, 0x76, 0xF0, 0x76, 0xCC, 0x3F, 0x1E, 0x3E, 0xCC, 0xA6, 0x31, 0xE5, 0xDC, 0xFF, 0x08, 0x87, 0xFB, 0x57, 0xFF, 0xE8, 0x2A, 0x2C, 0x46, 0x32, 0x4D, 0x1F, 0x2F, 0x6F, 0x5F, 0x53, 0x95, 0xA0, 0xF0, 0xED, 0x6C, 0xBE, 0x04, 0xF7, 0x02, 0x7E, 0x9C, 0xB5, 0x21, 0xE8, 0x00, 0x00, 0x00]],
            );
          },
        );
      },
    );
  },
);
